{"version":3,"sources":["components/search-bar.js","components/current-weather.js","components/forecast.js","api/weatherAPI.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","handleChange","bind","handleSubmit","event","this","onSearchChange","target","value","preventDefault","onFormSubmit","searchValue","className","onSubmit","type","icon","faSearch","color","id","name","onChange","React","Component","CurrentWeather","temperature","current","temp","description","weather","image","url","alt","feelsLike","feels_like","width","src","Forecast","items","forecast","map","f","i","unixTimestamp","dt","hour","Date","getHours","ampm","apiClient","axios","create","baseURL","CELSIUS","App","state","location","metric","hourlyForecast","handleLocationChange","updateTemperature","setState","a","get","process","then","res","data","weatherRes","lat","coord","lon","forecastRes","hourly","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uYA+CeA,E,kDAxCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAHH,E,gDAMnB,SAAaE,GACXC,KAAKL,MAAMM,eAAeF,EAAMG,OAAOC,S,0BAGzC,SAAaJ,GAEXA,EAAMK,iBAENJ,KAAKL,MAAMU,iB,oBAGb,WACE,IAAMC,EAAcN,KAAKL,MAAMW,YAE/B,OACE,qBAAKC,UAAU,aAAf,SACE,uBAAMA,UAAU,cAAcC,SAAUR,KAAKF,aAA7C,UACE,wBAAQS,UAAU,mBAAmBE,KAAK,SAA1C,SACE,cAAC,IAAD,CAAiBC,KAAMC,IAAUC,MAAM,YAEzC,uBACEL,UAAU,qBACVE,KAAK,OACLI,GAAG,YACHC,KAAK,YACLX,MAAOG,EACPS,SAAUf,KAAKJ,wB,GAjCHoB,IAAMC,WC8BfC,G,kKA/Bb,WACE,IAAMC,EAAcnB,KAAKL,MAAMyB,QAAQC,KACjCC,EAActB,KAAKL,MAAMyB,QAAQG,QAAQ,GAAGD,YAC5CE,EAAQ,CACZC,IAAI,oCAAD,OAAsCzB,KAAKL,MAAMyB,QAAQG,QAAQ,GAAGb,KAApE,WACHgB,IAAI,aAAD,OAAe1B,KAAKL,MAAMyB,QAAQG,QAAQ,GAAGD,cAE5CK,EAAY3B,KAAKL,MAAMyB,QAAQQ,WAErC,OACE,sBAAKrB,UAAU,kBAAf,UACE,sBAAKA,UAAU,gCAAf,UACE,gCACE,uBAAMA,UAAU,+BAAhB,UACGY,EACD,sBAAMZ,UAAU,0BAAhB,qBAEF,mBAAGA,UAAU,+BAAb,SAA6Ce,OAG/C,qBAAKO,MAAM,MAAMC,IAAKN,EAAMC,IAAKC,IAAKF,EAAME,SAG9C,8BACE,oBAAGnB,UAAU,8BAAb,wBAAuDoB,EAAvD,mB,GAzBmBX,IAAMC,YCsCpBc,G,kKArCb,WACE,IAAMC,EAAQhC,KAAKL,MAAMsC,SAASC,KAAI,SAACC,EAAGC,GACxC,IAAMZ,EAAQ,CACZC,IAAI,oCAAD,OAAsCU,EAAEZ,QAAQ,GAAGb,KAAnD,WACHgB,IAAI,aAAD,OAAeS,EAAEZ,QAAQ,GAAGD,cAE3BA,EAAca,EAAEZ,QAAQ,GAAGD,YAC3Be,EAAgBF,EAAEG,GACpBC,EAAO,IAAIC,KAAqB,IAAhBH,GAAsBI,WACtCC,EAAO,KAOX,OANa,IAATH,EAAYA,EAAO,GACdA,EAAO,KACdA,GAAc,GACdG,EAAO,MAIP,sBAAanC,UAAU,gBAAvB,UACE,oBAAGA,UAAU,sBAAb,UAAoCgC,EAApC,IAA2CG,KAC3C,oBAAGnC,UAAU,sBAAb,UACG4B,EAAEd,KADL,IACW,sBAAMd,UAAU,wBAAhB,qBAEX,qBAAKA,UAAU,qBAAqBuB,IAAKN,EAAMC,IAAKC,IAAKF,EAAME,MAC/D,mBAAGnB,UAAU,6BAAb,SAA2Ce,MANnCc,MAWd,OACE,sBAAK7B,UAAU,WAAf,UACE,oBAAIA,UAAU,kBAAd,6BACA,qBAAKA,UAAU,iBAAf,SAAiCyB,W,GAhClBhB,IAAMC,Y,QCFvB0B,E,OAAYC,EAAMC,OAAO,CAC7BC,QAAS,4CCMLC,EAAU,UAyDDC,E,kDAvDb,WAAYrD,GAAQ,IAAD,8BACjB,cAAMA,IACDsD,MAAQ,CACXC,SAAU,GACVC,OAAQJ,EACRK,eAAgB,GAChBhC,QAAS,IAGX,EAAKiC,qBAAuB,EAAKA,qBAAqBxD,KAA1B,gBAC5B,EAAKyD,kBAAoB,EAAKA,kBAAkBzD,KAAvB,gBAEzB,EAAKyD,oBAZY,E,wDAenB,SAAqBJ,GACnBlD,KAAKuD,SAAS,CAAEL,e,sEAGlB,8BAAAM,EAAA,sEDxBiCN,ECyBwBlD,KAAKiD,MAAMC,SDxB7DP,EACJc,IADI,qBAEWP,EAFX,kBAE6BQ,mCAF7B,kBAIJC,MAAK,SAACC,GAAD,OAASA,EAAIC,QCmBrB,cACQC,EADR,gBDhBmBC,ECmBfD,EAAWE,MAAMD,IDnBGE,ECoBpBH,EAAWE,MAAMC,IDnBdtB,EACJc,IADI,uBAEaM,EAFb,gBAEwBE,EAFxB,kBAEqCP,mCAFrC,kBAIJC,MAAK,SAACC,GAAD,OAASA,EAAIC,QCWrB,OAEQK,EAFR,OAOElE,KAAKuD,SAAS,CACZnC,QAAS8C,EAAY9C,QACrB+B,OAAQJ,EACRK,eAAgBc,EAAYC,SAVhC,iCDhBkB,IAACJ,EAAKE,EARSf,ICwBjC,Y,0EAcA,WACE,IAAMA,EAAWlD,KAAKiD,MAAMC,SACtBE,EAAiBpD,KAAKiD,MAAMG,eAC5BhC,EAAUpB,KAAKiD,MAAM7B,QAE3B,OACE,qBAAKb,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,CACED,YAAa4C,EACbjD,eAAgBD,KAAKqD,qBACrBhD,aAAcL,KAAKsD,oBAGpBlC,GAAW,cAAC,EAAD,CAAgBA,QAASA,IACpCgC,EAAegB,OAAS,GAAK,cAAC,EAAD,CAAUnC,SAAUmB,a,GAjD1CpC,IAAMC,WCEToD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6ea8f978.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./search-bar.scss\";\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onSearchChange(event.target.value);\n  }\n\n  handleSubmit(event) {\n    // preventing from refreshing the page\n    event.preventDefault();\n\n    this.props.onFormSubmit();\n  }\n\n  render() {\n    const searchValue = this.props.searchValue;\n\n    return (\n      <div className=\"search-bar\">\n        <form className=\"search-form\" onSubmit={this.handleSubmit}>\n          <button className=\"search-form__btn\" type=\"submit\">\n            <FontAwesomeIcon icon={faSearch} color=\"white\" />\n          </button>\n          <input\n            className=\"search-form__input\"\n            type=\"text\"\n            id=\"searchBox\"\n            name=\"searchBox\"\n            value={searchValue}\n            onChange={this.handleChange}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from \"react\";\n\nimport \"./current-weather.scss\";\n\nclass CurrentWeather extends React.Component {\n  render() {\n    const temperature = this.props.current.temp;\n    const description = this.props.current.weather[0].description;\n    const image = {\n      url: `http://openweathermap.org/img/wn/${this.props.current.weather[0].icon}@4x.png`,\n      alt: `Image of  ${this.props.current.weather[0].description}`,\n    };\n    const feelsLike = this.props.current.feels_like;\n\n    return (\n      <div className=\"current-weather\">\n        <div className=\"current-weather__main-content\">\n          <div>\n            <span className=\"current-weather__temperature\">\n              {temperature}\n              <span className=\"current-weather__degree\">°</span>\n            </span>\n            <p className=\"current-weather__description\">{description}</p>\n          </div>\n\n          <img width=\"150\" src={image.url} alt={image.alt} />\n        </div>\n\n        <div>\n          <p className=\"current-weather__feels-like\">Feels like {feelsLike}°</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CurrentWeather;\n","import React from \"react\";\n\nimport './forecast.scss'\n\nclass Forecast extends React.Component {\n  render() {\n    const items = this.props.forecast.map((f, i) => {\n      const image = {\n        url: `http://openweathermap.org/img/wn/${f.weather[0].icon}@2x.png`,\n        alt: `Image of  ${f.weather[0].description}`,\n      };\n      const description = f.weather[0].description;\n      const unixTimestamp = f.dt;\n      let hour = new Date(unixTimestamp * 1000).getHours();\n      let ampm = 'AM';\n      if (hour === 0) hour = 12; \n      else if (hour > 12) {\n        hour = hour - 12;\n        ampm = 'PM';\n      }\n\n      return (\n        <div key={i} className=\"forecast-item\">\n          <p className=\"forecast-item__time\">{hour} {ampm}</p>\n          <p className=\"forecast-item__temp\">\n            {f.temp} <span className=\"forecast-item__degree\">°</span>\n          </p>\n          <img className=\"forecast-item__img\" src={image.url} alt={image.alt} />\n          <p className=\"forecast-item__description\">{description}</p>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"forecast\">\n        <h3 className=\"forecast__title\">Hourly Forecast</h3>\n        <div className=\"forecast-items\">{items}</div>\n      </div>\n    );\n  }\n}\n\nexport default Forecast;\n","import axios from \"axios\";\n\nconst apiClient = axios.create({\n  baseURL: \"http://api.openweathermap.org/data/2.5/\",\n});\n\nconst getWeatherBasedOnLocation = (location) => {\n  return apiClient\n    .get(\n      `/weather?q=${location}&APPID=${process.env.REACT_APP_WEATHER_APP_API}&units=metric`\n    )\n    .then((res) => res.data);\n};\n\nconst getForecast = (lat, lon) => {\n  return apiClient\n    .get(\n      `/onecall?lat=${lat}&lon=${lon}&APPID=${process.env.REACT_APP_WEATHER_APP_API}&units=metric`\n    )\n    .then((res) => res.data);\n};\n\nexport { getWeatherBasedOnLocation, getForecast };\n","import React from \"react\";\nimport \"./App.css\";\n\nimport SearchBar from \"./components/search-bar\";\nimport CurrentWeather from \"./components/current-weather\";\nimport Forecast from \"./components/forecast\";\n\nimport * as Api from \"./api/weatherAPI\";\n\nconst CELSIUS = \"celsius\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: \"\",\n      metric: CELSIUS,\n      hourlyForecast: [],\n      current: \"\",\n    };\n\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.updateTemperature = this.updateTemperature.bind(this);\n\n    this.updateTemperature();\n  }\n\n  handleLocationChange(location) {\n    this.setState({ location });\n  }\n\n  async updateTemperature() {\n    const weatherRes = await Api.getWeatherBasedOnLocation(this.state.location);\n    const forecastRes = await Api.getForecast(\n      weatherRes.coord.lat,\n      weatherRes.coord.lon\n    );\n\n    this.setState({\n      current: forecastRes.current,\n      metric: CELSIUS,\n      hourlyForecast: forecastRes.hourly,\n    });\n  }\n\n  render() {\n    const location = this.state.location;\n    const hourlyForecast = this.state.hourlyForecast;\n    const current = this.state.current;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <SearchBar\n            searchValue={location}\n            onSearchChange={this.handleLocationChange}\n            onFormSubmit={this.updateTemperature}\n          />\n\n          {current && <CurrentWeather current={current} />}\n          {hourlyForecast.length > 0 && <Forecast forecast={hourlyForecast} />}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}